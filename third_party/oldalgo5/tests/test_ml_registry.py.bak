import pandas as pd
import numpy as np
from algo2.strategies.registry import register_ml, get_registry
from algo2.strategies.base_ml_strategy import BaseMLStrategy

class TinyML(BaseMLStrategy):
    NAME = "ml_tiny"
    def create_model(self, **params):
        from sklearn.linear_model import LogisticRegression
        return LogisticRegression(max_iter=1000)
    def prepare_features(self, df: pd.DataFrame):
        x = df.copy()
        close = x['Close'] if 'Close' in x.columns else x['close']
        x['ret'] = close.pct_change()
        x['target'] = (close.shift(-1) > close).astype(int)
        x = x.dropna()
        return x[['ret']], x['target']

def test_ml_adapter_signal_shape():
    # Register on the fly
    schema = TinyML.default_schema()
    register_ml("ml_tiny", schema)(TinyML)
    REG, ORDER = get_registry()
    assert "ml_tiny" in REG
    # Build synthetic data
    idx = pd.date_range("2024-01-01", periods=200, freq="D")
    price = pd.Series(100.0, index=idx) * (1 + pd.Series(np.random.normal(0,0.01,len(idx)), index=idx)).cumprod()
    df = pd.DataFrame({"Close": price})
    sig = REG["ml_tiny"]["gen"](df, {"threshold":0.5, "neutral_band":0.1})
    assert isinstance(sig, pd.Series)
    assert len(sig) == len(df)
