name: cion:  push:    branches: ['**']    paths-ignore:      - 'third_party/**'      - '**/*.md'      - '**/*.png'      - '**/*.jpg'      - '.github/badges/**'  pull_request:    branches: [ main ]    types: [ opened, synchronize, reopened, ready_for_review ]    paths-ignore:      - 'third_party/**'      - '**/*.md'      - '**/*.png'      - '**/*.jpg'      - '.github/badges/**'  workflow_dispatch:# PR'a yorum yazmak ve rozet commitâ€™i iÃ§in izinlerpermissions:  contents: write  pull-requests: write  issues: writejobs:  test:    runs-on: ubuntu-latest    strategy:      matrix:        python-version: ['3.12']    # EÅŸikler: gerekirse repo ayarÄ±na gÃ¶re deÄŸiÅŸtirin    env:      COV_MIN: "85"     # line coverage alt sÄ±nÄ±rÄ± (%)      BRANCH_MIN: "50"  # branch coverage alt sÄ±nÄ±rÄ± (%)    steps:      - uses: actions/checkout@v4      - uses: actions/setup-python@v5        with:          python-version: ${{ matrix.python-version }}      - name: Cache pip        uses: actions/cache@v4        with:          path: ~/.cache/pip          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}          restore-keys: |            ${{ runner.os }}-pip-      - name: Install deps        run: |          python -m pip install --upgrade pip          pip install -r requirements-dev.txt || true          pip install pytest pytest-cov      - name: Lint (ruff)        run: ruff check .      - name: Format (black --check)        run: black --check .      - name: Typecheck (mypy)        run: mypy --config-file pyproject.toml src      - name: Test + Coverage        env:          PYTHONPATH: src        run: |          pytest -q --ignore=third_party --maxfail=1 --disable-warnings \                 --cov=src --cov-branch --cov-report=xml:coverage.xml \                 --cov-fail-under=${{ env.COV_MIN }}      - name: Coverage summary (outputs + step summary)        id: covsum        if: always()        run: |          python - <<'PY' > summary.md          import os, xml.etree.ElementTree as ET          r = ET.parse('coverage.xml').getroot()          line = float(r.attrib.get('line-rate', 0))*100          branch = float(r.attrib.get('branch-rate', 0))*100          print("# Coverage")          print(f"- Line: {line:.2f}%")          print(f"- Branch: {branch:.2f}%")          with open(os.environ["GITHUB_OUTPUT"], "a") as f:              f.write(f"line={line:.2f}\n")              f.write(f"branch={branch:.2f}\n")          PY          cat summary.md >> "$GITHUB_STEP_SUMMARY"      - name: Enforce branch coverage threshold        if: always()        run: |          python - <<'PY'          import os, sys, xml.etree.ElementTree as ET          branch_min = float(os.environ.get("BRANCH_MIN", "0"))          r = ET.parse('coverage.xml').getroot()          branch = float(r.attrib.get('branch-rate', 0))*100          print(f"Branch: {branch:.2f}% (min {branch_min:.2f}%)")          if branch < branch_min:              print(f"::error::Branch coverage {branch:.2f}% is below threshold {branch_min:.2f}%")              sys.exit(1)          PY      - name: Upload coverage.xml        if: always()        uses: actions/upload-artifact@v4        with:          name: coverage.xml          path: coverage.xml          if-no-files-found: ignore      - name: Generate coverage badge (SVG)        if: always()        run: |          pip install "genbadge[coverage]"          mkdir -p .github/badges          genbadge coverage -i coverage.xml -o .github/badges/coverage.svg      - name: Upload coverage badge        if: always()        uses: actions/upload-artifact@v4        with:          name: coverage-badge          path: .github/badges/coverage.svg          if-no-files-found: ignore      - name: Comment coverage on PR        if: ${{ github.event_name == 'pull_request' }}        uses: peter-evans/create-or-update-comment@v4        with:          issue-number: ${{ github.event.pull_request.number }}          body: |            âš™ï¸ **CI Coverage**            - Line: **${{ steps.covsum.outputs.line }}%**            - Branch: **${{ steps.covsum.outputs.branch }}%**            <sub>Thresholds: line â‰¥ ${{ env.COV_MIN }}%, branch â‰¥ ${{ env.BRANCH_MIN }}%</sub>      - name: Commit badge to repo (main)        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}        run: |          git config user.name  "github-actions[bot]"          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"          git add .github/badges/coverage.svg          git commit -m "ci: update coverage badge [skip ci]" || echo "No changes"          git push
