*** /dev/null
--- a/src/algo5/compliance/__init__.py
@@
+"""Compliance package (reports, signatures, audit logs)."""

*** /dev/null
--- a/src/algo5/compliance/signature.py
@@
+from __future__ import annotations
+from pathlib import Path
+import hashlib, hmac
+
+def sign_file(path: Path, key: bytes) -> str:
+    """Return hex HMAC-SHA256 of file bytes with given key."""
+    data = path.read_bytes()
+    return hmac.new(key, data, hashlib.sha256).hexdigest()
+
+def verify_file(path: Path, sig: str, key: bytes) -> bool:
+    """Constant-time verification."""
+    return hmac.compare_digest(sign_file(path, key), sig)

*** /dev/null
--- a/src/algo5/compliance/audit_logger.py
@@
+from __future__ import annotations
+from pathlib import Path
+from typing import Optional, Dict, Any
+import json, hashlib, time
+
+class AuditLogger:
+    """Append-only JSONL audit log with a simple hash chain."""
+    def __init__(self, file: Path):
+        self.file = file
+        self.file.parent.mkdir(parents=True, exist_ok=True)
+
+    def _tail_prev_hash(self) -> Optional[str]:
+        if not self.file.exists():
+            return None
+        lines = self.file.read_text(encoding="utf-8").splitlines()
+        if not lines:
+            return None
+        try:
+            return json.loads(lines[-1])["hash"]
+        except Exception:
+            return None
+
+    def append(self, run_id: str, event: str, payload: Dict[str, Any]) -> None:
+        prev = self._tail_prev_hash()
+        rec = {
+            "ts": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
+            "run_id": run_id,
+            "event": event,
+            "payload": payload,
+            "prev_hash": prev,
+        }
+        raw = json.dumps(rec, separators=(",", ":"), ensure_ascii=False)
+        rec["hash"] = hashlib.sha256(raw.encode("utf-8")).hexdigest()
+        with self.file.open("a", encoding="utf-8") as f:
+            f.write(json.dumps(rec, ensure_ascii=False) + "\n")

*** /dev/null
--- a/src/algo5/compliance/report.py
@@
+from __future__ import annotations
+from pathlib import Path
+from typing import Dict, Any
+import pandas as pd
+
+def build_html(run_id: str, metrics: Dict[str, Any], trades: pd.DataFrame, out_dir: Path) -> Path:
+    """Create a tiny self-contained HTML report (PDF opsiyonel)."""
+    out_dir.mkdir(parents=True, exist_ok=True)
+    html = f"""<html><head><meta charset="utf-8"><title>Run {run_id}</title>
+    <style>body{{font-family:system-ui,Segoe UI,Arial,sans-serif;padding:16px}}
+    pre{{background:#f6f8fa;padding:12px;border-radius:8px;overflow:auto}}</style></head>
+    <body>
+      <h1>Run {run_id}</h1>
+      <h2>Metrics</h2>
+      <pre>{metrics}</pre>
+      <h2>Trades (head)</h2>
+      <pre>{trades.head().to_markdown()}</pre>
+    </body></html>"""
+    path = out_dir / f"{run_id}.html"
+    path.write_text(html, encoding="utf-8")
+    return path

*** /dev/null
--- a/tests/compliance/test_report_signature.py
@@
+from pathlib import Path
+import pandas as pd
+from algo5.compliance.report import build_html
+from algo5.compliance.signature import sign_file, verify_file
+from algo5.compliance.audit_logger import AuditLogger
+
+def test_report_and_signature(tmp_path: Path):
+    html = build_html("t1", {"sharpe": 0.5}, pd.DataFrame({"px":[1,2]}), tmp_path)
+    key = b"secret"
+    sig = sign_file(html, key)
+    assert verify_file(html, sig, key)
+    log = AuditLogger(tmp_path/"audit.jsonl")
+    log.append("t1", "built", {"file": str(html)})
+    assert (tmp_path/"audit.jsonl").exists()
+    last = (tmp_path/"audit.jsonl").read_text(encoding="utf-8").splitlines()[-1]
+    assert '"hash"' in last

*** /dev/null
--- a/ui/tabs/report.py
@@
+import os, streamlit as st
+from pathlib import Path
+import pandas as pd
+from algo5.compliance.report import build_html
+from algo5.compliance.signature import sign_file
+from algo5.compliance.audit_logger import AuditLogger
+
+def run():
+    st.header("Compliance Report")
+    run_id = st.text_input("Run ID", "demo-run", key="w7_run_id")
+    reports_dir = Path(os.getenv("ALGO5_REPORTS_ROOT", "reports"))
+    if st.button("Build Report", key="w7_build_report_btn"):
+        metrics = {"sharpe": 1.23, "maxdd": -0.12}
+        trades = pd.DataFrame({"time":["t1","t2"], "px":[101,99], "qty":[10,-10]})
+        path = build_html(run_id, metrics, trades, reports_dir)
+        key = os.getenv("ALGO5_SIG_KEY", "devkey").encode()
+        sig = sign_file(path, key)
+        AuditLogger(Path("audits/audit.jsonl")).append(run_id, "report_built", {"path": str(path), "sig": sig})
+        st.success(f"Report created: {path}")
+        st.code(sig, language="text")
+        with path.open("rb") as f:
+            st.download_button("Download HTML", f, file_name=path.name, key="w7_dl_html")

*** /dev/null
--- a/src/algo5/monitoring/__init__.py
@@
+"""Monitoring (health, metrics, sentry-noop)."""

*** /dev/null
--- a/src/algo5/monitoring/health.py
@@
+try:
+    from fastapi import FastAPI
+except Exception:  # pragma: no cover
+    FastAPI = None  # type: ignore
+
+if FastAPI:
+    app = FastAPI()
+
+    @app.get("/health")
+    def health():
+        return {"status": "ok"}

*** /dev/null
--- a/src/algo5/monitoring/prometheus.py
@@
+from __future__ import annotations
+try:
+    from prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST
+    from fastapi import APIRouter, Response
+except Exception:  # pragma: no cover
+    Counter = Histogram = generate_latest = CONTENT_TYPE_LATEST = None  # type: ignore
+    APIRouter = Response = None  # type: ignore
+
+if APIRouter and Counter and Histogram:
+    dq_errors_total = Counter("dq_errors_total", "DQ errors")
+    latency_ms = Histogram("latency_ms", "latency in ms", buckets=(10,50,100,250,500,1000))
+    router = APIRouter()
+
+    @router.get("/metrics")
+    def metrics():
+        return Response(generate_latest(), media_type=CONTENT_TYPE_LATEST)

*** /dev/null
--- a/src/algo5/monitoring/sentry.py
@@
+import os
+def init():  # pragma: no cover
+    dsn = os.getenv("SENTRY_DSN")
+    if not dsn:
+        return
+    try:
+        import sentry_sdk
+        sentry_sdk.init(dsn=dsn, traces_sample_rate=0.0)
+    except Exception:
+        pass

*** /dev/null
--- a/tests/monitoring/test_health_prom.py
@@
+import pytest
+fastapi = pytest.importorskip("fastapi")
+from fastapi.testclient import TestClient
+from algo5.monitoring.health import app
+
+def test_health_ok():
+    c = TestClient(app)
+    r = c.get("/health")
+    assert r.status_code == 200
+    assert r.json()["status"] == "ok"
+
+def test_metrics_if_available():
+    try:
+        from algo5.monitoring import prometheus
+    except Exception:
+        pytest.skip("prometheus not installed")
+    if not getattr(prometheus, "router", None):
+        pytest.skip("prometheus router unavailable")
+    app.include_router(prometheus.router)
+    c = TestClient(app)
+    r = c.get("/metrics")
+    assert r.status_code == 200
+    assert b"dq_errors_total" in r.content

*** /dev/null
--- a/src/algo5/perf/__init__.py
@@
+"""Performance primitives (numba/numpy accelerated)."""

*** /dev/null
--- a/src/algo5/perf/optimizer.py
@@
+import numpy as np
+try:
+    from numba import njit
+except Exception:  # pragma: no cover
+    def njit(fn): return fn  # type: ignore
+
+@njit
+def fast_pnl(positions: np.ndarray, close: np.ndarray) -> np.ndarray:
+    n = close.shape[0]
+    out = np.zeros(n)
+    for t in range(1, n):
+        out[t] = out[t-1] + positions[t-1] * (close[t] - close[t-1])
+    return out
+
+@njit
+def fast_max_drawdown(eq: np.ndarray) -> float:
+    peak = eq[0]
+    dd = 0.0
+    for i in range(eq.shape[0]):
+        if eq[i] > peak:
+            peak = eq[i]
+        cur = (eq[i] - peak) / peak
+        if cur < dd:
+            dd = cur
+    return dd

*** /dev/null
--- a/src/algo5/caching/__init__.py
@@
+"""Simple function-level smart cache (TTL + disk)."""

*** /dev/null
--- a/src/algo5/caching/smart_cache.py
@@
+from __future__ import annotations
+from pathlib import Path
+from typing import Callable
+import os, json, time, hashlib
+
+ROOT = Path(os.getenv("ALGO5_CACHE_ROOT", ".cache/features"))
+(ROOT/"smart").mkdir(parents=True, exist_ok=True)
+
+def _key(func: Callable, args, kwargs) -> str:
+    raw = json.dumps([func.__name__, args, kwargs], default=str, sort_keys=True)
+    return hashlib.sha256(raw.encode()).hexdigest()
+
+def cache(ttl_sec: int = 3600):
+    def deco(func: Callable):
+        def wrapper(*args, **kwargs):
+            k = _key(func, args, kwargs)
+            path = ROOT/"smart"/f"{k}.json"
+            now = time.time()
+            if path.exists():
+                obj = json.loads(path.read_text("utf-8"))
+                if now - obj["ts"] < ttl_sec:
+                    return obj["val"]
+            val = func(*args, **kwargs)
+            path.write_text(json.dumps({"ts": now, "val": val}, default=str), encoding="utf-8")
+            return val
+        return wrapper
+    return deco

*** /dev/null
--- a/src/algo5/api/__init__.py
@@
+"""REST API (FastAPI)."""

*** /dev/null
--- a/src/algo5/api/security.py
@@
+import os, hmac
+_API_KEY = os.getenv("ALGO5_API_KEY", "devkey")
+
+def check_key(key: str) -> bool:
+    return hmac.compare_digest(key or "", _API_KEY)
+
+def requires_key(headers) -> bool:
+    return check_key(headers.get("x-api-key", ""))

*** /dev/null
--- a/src/algo5/api/server.py
@@
+try:
+    from fastapi import FastAPI, HTTPException
+except Exception:  # pragma: no cover
+    FastAPI = None  # type: ignore
+    HTTPException = Exception  # type: ignore
+
+if FastAPI:
+    from .security import requires_key
+    from .routes import strategies, backtest, live, admin
+
+    app = FastAPI(title="ALGO5 API")
+    app.include_router(strategies.router, prefix="/strategies")
+    app.include_router(backtest.router,  prefix="/backtest")
+    app.include_router(live.router,      prefix="/live")
+    app.include_router(admin.router)
+
+    @app.middleware("http")
+    async def auth_mw(request, call_next):
+        if not request.url.path.startswith("/health"):
+            if not requires_key({"x-api-key": request.headers.get("x-api-key","")}):
+                raise HTTPException(status_code=401, detail="unauthorized")
+        return await call_next(request)

*** /dev/null
--- a/src/algo5/api/routes/__init__.py
@@
+"""API routes."""

*** /dev/null
--- a/src/algo5/api/routes/strategies.py
@@
+from fastapi import APIRouter
+router = APIRouter()
+
+@router.get("/")
+def list_strategies():
+    return {"items": ["sma_crossover", "rsi_threshold"]}

*** /dev/null
--- a/src/algo5/api/routes/backtest.py
@@
+from fastapi import APIRouter
+router = APIRouter()
+
+@router.post("/run")
+def run_bt(req: dict):
+    return {"run_id": "bt-demo-001", "status": "queued"}

*** /dev/null
--- a/src/algo5/api/routes/live.py
@@
+from fastapi import APIRouter
+router = APIRouter()
+
+@router.get("/status")
+def status():
+    return {"paper": "idle", "positions": []}

*** /dev/null
--- a/src/algo5/api/routes/admin.py
@@
+from fastapi import APIRouter
+router = APIRouter()
+
+@router.get("/health")
+def health():
+    return {"status": "ok"}

*** /dev/null
--- a/tests/api/test_routes.py
@@
+import pytest
+fastapi = pytest.importorskip("fastapi")
+from fastapi.testclient import TestClient
+
+def test_health():
+    from algo5.api.server import app
+    c = TestClient(app)
+    r = c.get("/health")
+    assert r.status_code == 200 and r.json()["status"]=="ok"
+
+def test_auth_and_strategies():
+    from algo5.api.server import app
+    c = TestClient(app)
+    assert c.get("/strategies/").status_code == 401
+    r = c.get("/strategies/", headers={"x-api-key":"devkey"})
+    assert r.status_code == 200 and "items" in r.json()
+
+def test_backtest_run():
+    from algo5.api.server import app
+    c = TestClient(app)
+    r = c.post("/backtest/run", json={"symbol":"DEMO"}, headers={"x-api-key":"devkey"})
+    assert r.status_code == 200 and r.json()["run_id"].startswith("bt-") is False

*** /dev/null
--- a/src/algo5/robustness/stress/__init__.py
@@
+"""Stress scenarios & preset runner."""

*** /dev/null
--- a/src/algo5/robustness/stress/scenarios.py
@@
+from __future__ import annotations
+import pandas as pd
+
+def vol_shock(close: pd.Series, factor: float) -> pd.Series:
+    ret = close.pct_change().fillna(0.0) * factor
+    return (1.0 + ret).cumprod() * float(close.iloc[0])
+
+def gap_down(close: pd.Series, pct: float, at_idx: int) -> pd.Series:
+    out = close.copy()
+    if 0 <= at_idx < len(out):
+        out.iloc[at_idx:] *= (1.0 + pct)
+    return out
+
+def slippage_spike(spread_bps: float) -> float:
+    return spread_bps

*** /dev/null
--- a/src/algo5/robustness/stress/runner.py
@@
+from __future__ import annotations
+from pathlib import Path
+import pandas as pd
+try:
+    import yaml
+except Exception:  # pragma: no cover
+    yaml = None  # type: ignore
+from .scenarios import vol_shock, gap_down
+
+def run_preset(close: pd.Series, preset_file: Path, name: str) -> dict:
+    if not yaml:
+        raise RuntimeError("pyyaml not installed")
+    spec = yaml.safe_load(preset_file.read_text(encoding="utf-8"))[name]
+    alt = close.copy()
+    for step in spec.get("steps", []):
+        t = step["type"]
+        if t == "vol_shock":
+            alt = vol_shock(alt, float(step["factor"]))
+        elif t == "gap_down":
+            alt = gap_down(alt, float(step["pct"]), int(step["at"]))
+    base_ret = close.pct_change().fillna(0).mean()
+    alt_ret  = alt.pct_change().fillna(0).mean()
+    return {"preset": name, "base_mean": float(base_ret), "alt_mean": float(alt_ret), "delta": float(alt_ret-base_ret)}

*** /dev/null
--- a/src/algo5/robustness/stress/presets.yaml
@@
+crisis_08:
+  steps:
+    - {type: gap_down, pct: -0.2, at: 10}
+    - {type: vol_shock, factor: 2.5}
+covid_20:
+  steps:
+    - {type: gap_down, pct: -0.1, at: 5}
+    - {type: vol_shock, factor: 1.8}

*** /dev/null
--- a/tests/robustness/test_stress.py
@@
+import pytest, pandas as pd
+yaml = pytest.importorskip("yaml")
+from pathlib import Path
+from algo5.robustness.stress.runner import run_preset
+
+def test_preset_runner(tmp_path: Path):
+    idx = pd.date_range("2020-01-01", periods=30, freq="D")
+    base = pd.Series(100.0, index=idx).mul((1.0+0.002)**range(30))
+    preset = tmp_path/"p.yaml"
+    preset.write_text(
+        "demo:\n  steps:\n    - {type: gap_down, pct: -0.2, at: 10}\n    - {type: vol_shock, factor: 2.0}\n",
+        encoding="utf-8"
+    )
+    rep = run_preset(base, preset, "demo")
+    assert rep["preset"]=="demo" and "delta" in rep

*** /dev/null
--- a/.github/workflows/compliance.yml
@@
+name: Compliance
+on: [push, pull_request]
+jobs:
+  test-compliance:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with: { python-version: "3.12" }
+      - run: pip install -e ".[test]"
+      - run: pytest tests/compliance -q

*** /dev/null
--- a/.github/workflows/monitoring.yml
@@
+name: Monitoring
+on: [push, pull_request]
+jobs:
+  test-monitoring:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with: { python-version: "3.12" }
+      - run: pip install -e ".[test,monitoring,api]"
+      - run: pytest tests/monitoring -q

*** /dev/null
--- a/.github/workflows/api.yml
@@
+name: API
+on: [push, pull_request]
+jobs:
+  test-api:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with: { python-version: "3.12" }
+      - run: pip install -e ".[test,api]"
+      - run: pytest tests/api -q

*** /dev/null
--- a/.github/workflows/robustness.yml
@@
+name: Robustness
+on: [push, pull_request]
+jobs:
+  test-robust:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with: { python-version: "3.12" }
+      - run: pip install -e ".[test,robust]"
+      - run: pytest tests/robustness -q

*** /dev/null
--- a/src/algo5/ui_patch_note.txt
@@
+Add "Report" tab into UI app to expose compliance builder:
+  from ui.tabs.report import run as report_tab
+  # tabs = ["Data", "Diagnostics", "Report"]
+  # if tab == "Report": report_tab()

*** /dev/null
--- a/patch.README.txt
@@
+W7–W11 patch içerikleri:
+ - Compliance: reports, signatures, audit log + UI tab + tests
+ - Monitoring: health/metrics/sentry (opsiyonel) + tests
+ - Perf & Cache: fast_pnl/fast_max_drawdown + smart_cache
+ - API: FastAPI server + routes + tests (opsiyonel bağımlılıklar)
+ - Stress: scenarios/runner/presets + tests (PyYAML ops.)
+Testleri tümüyle çalıştırmak için:
+  pip install -e ".[test,api,monitoring,robust]"
+Aksi halde ilgili testler eksik bağımlılıkta skip olur.

*** a/pyproject.toml
--- b/pyproject.toml
@@
 [project]
@@
 dependencies = [
     "pandas>=2.0",
     "pyarrow>=14.0",
-    "pytest>=8.0",
-    "pytest-cov>=6.0",
+    "pytest>=8.0",
+    "pytest-cov>=6.0",
 ]
@@
 [project.optional-dependencies]
 test = [
     "pytest>=8.0",
     "pytest-cov>=6.0",
 ]
+api = [
+    "fastapi>=0.110",
+    "uvicorn>=0.29",
+    "httpx>=0.27",
+]
+monitoring = [
+    "fastapi>=0.110",
+    "prometheus-client>=0.20",
+]
+robust = [
+    "pyyaml>=6.0.1",
+]
+perf = [
+    "numba>=0.59; platform_system != 'Windows' or platform_machine == 'x86_64'"
+]
